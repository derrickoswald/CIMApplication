package ch.ninecode.on

import java.io.Closeable
import java.nio.charset.StandardCharsets
import java.text.SimpleDateFormat
import java.util.TimeZone

import scala.collection.mutable.HashMap

import org.apache.spark.rdd.RDD
import org.apache.spark.sql.SparkSession
import org.apache.spark.storage.StorageLevel
import org.slf4j.Logger
import org.slf4j.LoggerFactory

import ch.ninecode.cim.CIMNetworkTopologyProcessor
import ch.ninecode.cim.CIMRDD
import ch.ninecode.cim.CIMTopologyOptions
import ch.ninecode.cim.ForceTrue
import ch.ninecode.cim.Unforced
import ch.ninecode.gl.GLMEdge
import ch.ninecode.gl.GridLABD
import ch.ninecode.gl.TransformerSet
import ch.ninecode.gl.Transformers
import ch.ninecode.model.BaseVoltage
import ch.ninecode.model.ConductingEquipment
import ch.ninecode.model.Element
import ch.ninecode.model.PowerTransformerEnd
import ch.ninecode.model.Terminal
import ch.ninecode.model.TopologicalNode

case class OneOfN (session: SparkSession, options: OneOfNOptions) extends CIMRDD
{
    if (options.verbose)
    {
        org.apache.log4j.LogManager.getLogger ("ch.ninecode.on.OneOfN").setLevel (org.apache.log4j.Level.INFO)
        org.apache.log4j.LogManager.getLogger ("ch.ninecode.on.Feeder").setLevel (org.apache.log4j.Level.INFO)
        org.apache.log4j.LogManager.getLogger ("ch.ninecode.cim.CIMNetworkTopologyProcessor").setLevel (org.apache.log4j.Level.INFO)
    }
    implicit val spark: SparkSession = session
    implicit val log: Logger = LoggerFactory.getLogger (getClass)

    // for dates without time zones, the timezone of the machine is used:
    //    date +%Z
    // timezone can be set on each node of the cluster with:
    //    dpkg-reconfigure tzdata
    // then choose Europe and then choose Zürich
    //
    // all dates generated by this program include the time zone
    val use_utc = true
    val date_format = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss z")
    if (use_utc)
        date_format.setTimeZone (TimeZone.getTimeZone ("UTC"))

    def using[T <: Closeable, R](resource: T)(block: T => R): R =
    {
        try { block (resource) }
        finally { resource.close () }
    }

    def storage_level_tostring (level: StorageLevel): String =
    {
        level match
        {
            case StorageLevel.NONE ⇒ "NONE"
            case StorageLevel.DISK_ONLY ⇒ "DISK_ONLY"
            case StorageLevel.DISK_ONLY_2 ⇒ "DISK_ONLY_2"
            case StorageLevel.MEMORY_ONLY ⇒ "MEMORY_ONLY"
            case StorageLevel.MEMORY_ONLY_2 ⇒ "MEMORY_ONLY_2"
            case StorageLevel.MEMORY_ONLY_SER ⇒ "MEMORY_ONLY_SER"
            case StorageLevel.MEMORY_ONLY_SER_2 ⇒ "MEMORY_ONLY_SER_2"
            case StorageLevel.MEMORY_AND_DISK ⇒ "MEMORY_AND_DISK"
            case StorageLevel.MEMORY_AND_DISK_2 ⇒ "MEMORY_AND_DISK_2"
            case StorageLevel.MEMORY_AND_DISK_SER ⇒ "MEMORY_AND_DISK_SER"
            case StorageLevel.MEMORY_AND_DISK_SER_2 ⇒ "MEMORY_AND_DISK_SER_2"
            case StorageLevel.OFF_HEAP ⇒ "OFF_HEAP"
            case _ ⇒ ""
        }
    }

    def run (): Long =
    {
        val start = System.nanoTime ()

        // read the file
        val reader_options = new HashMap[String, String] ()
        reader_options ++= options.cim_reader_options
        reader_options.put ("path", options.files.mkString (","))
        reader_options.put ("ch.ninecode.cim.make_edges", "false")
        reader_options.put ("ch.ninecode.cim.do_join", "false")
        reader_options.put ("ch.ninecode.cim.do_topo", "false")
        reader_options.put ("ch.ninecode.cim.do_topo_islands", "false")
        reader_options.put ("StorageLevel", storage_level_tostring (options.storage))
        val elements = session.read.format ("ch.ninecode.cim").options (reader_options).load (options.files:_*)
        log.info (elements.count () + " elements")

        val read = System.nanoTime ()
        log.info ("read: " + (read - start) / 1e9 + " seconds")

        // identify topological nodes if necessary
        val tns = session.sparkContext.getPersistentRDDs.filter(_._2.name == "TopologicalIsland")
        if (tns.isEmpty || tns.head._2.isEmpty)
        {
            val ntp = CIMNetworkTopologyProcessor (session)
            val ele = ntp.process (
                CIMTopologyOptions (
                    identify_islands = true,
                    force_retain_switches = ForceTrue,
                    force_retain_fuses = Unforced,
                    storage = options.storage))
            log.info (ele.count () + " elements")
        }

        val topo = System.nanoTime ()
        log.info ("topology: " + (topo - read) / 1e9 + " seconds")

        // get all the transformers
        val _transformers = new Transformers (session, options.storage)
        val tdata = _transformers.getTransformerData (topological_nodes = true, transformer_filter = transformer ⇒ true)

        // feeder service area calculations
        val feeder = Feeder (session, options.storage)
        val nodes_feeders = feeder.identifyFeeders.filter (_._2 != null) // (nodeid, feederid)

        // get a map of voltage for each TopologicalNode starting from Terminal elements
        // ToDo: fix these 1kV multiplier on the voltages
        log.info ("creating nodes")
        val voltages = get("BaseVoltage").asInstanceOf[RDD[BaseVoltage]].map(v ⇒ (v.id, v.nominalVoltage * 1000.0)).collectAsMap
        val end_voltages = getOrElse[PowerTransformerEnd].map (
            x ⇒
            {
                val voltage = voltages.getOrElse (x.TransformerEnd.BaseVoltage, x.ratedU * 1000.0)
                (x.TransformerEnd.Terminal, voltage)
            }
        )
        val zeros = end_voltages.filter (_._2 == 0.0)
        if (!zeros.isEmpty ())
            log.warn ("""transformer ends with no nominal voltage, e.g. %s""".format (zeros.take (5).map (_._1).mkString (",")))
        val equipment_voltages = getOrElse[Terminal].keyBy (_.ConductingEquipment).join (getOrElse[ConductingEquipment].keyBy (_.id)).values.map (
            x ⇒
            {
                val voltage = voltages.getOrElse (x._2.BaseVoltage, 0.0)
                (x._1.id, voltage)
            }
        )
        val nodevoltages = end_voltages.filter (_._2 != 0.0).union (equipment_voltages.filter (_._2 != 0))
            .join (getOrElse[Terminal].keyBy (_.id)).values
            .map (x ⇒ (x._2.TopologicalNode, x._1))

        // put it all together
        val ff = nodes_feeders.join (get[TopologicalNode].keyBy (_.id)).leftOuterJoin (nodevoltages).map (x ⇒ (x._1, (x._2._1._1, x._2._1._2, x._2._2))) // (nodeid, (feederid, TopologicalNode, voltage?))
        val nodes: RDD[(String, FeederNode)] = ff.leftOuterJoin (feeder.feederNodes).values // ((feederid, TopologicalNode, voltage?), feeder?)
            .map (x ⇒ (x._1._1, FeederNode.toFeederNode (x._2.map (List(_)).orNull, x._1._2.id, voltages.getOrElse (x._1._2.BaseVoltage, x._1._3.getOrElse (0.0))))).cache

        // get equipment with nodes & terminals
        log.info ("creating edges")
        val gg: RDD[(String, Iterable[(String, Terminal)])] = get[Terminal].map (x ⇒ (x.ConductingEquipment, (x.TopologicalNode, x))).groupByKey // (equipmentid, [(nodeid, terminal)])
        // eliminate 0Ω links
        val hh = gg.filter (x ⇒ x._2.groupBy (_._1).size > 1)
        val eq: RDD[(Iterable[(String, Terminal)], Element)] = get[ConductingEquipment]
//            // eliminate edges inside substations
//            .filter (x ⇒ "PSRType_Substation" != x.Equipment.PowerSystemResource.PSRType)
            .keyBy (_.id).join (get[Element]("Elements").keyBy (_.id)).map (x ⇒ (x._1, x._2._2)) // (elementid, Element)
            .join (hh).values.map (_.swap) // ([(nodeid, terminal)], Element)
            // eliminate edges with only one end
            .filter (x ⇒ (x._1.size > 1) && x._1.map (_._1).forall (_ != null)) // ([(nodeid, terminal)], Element)
        // index by feeder
        val jj: RDD[(String, (Iterable[(String, Terminal)], Element))] = eq.flatMap (x ⇒ x._1.map (y ⇒ (y._1, x))).join (nodes_feeders).values.distinct.map (_.swap) // (feederid, ([(nodeid, Terminal)], Element)
        // ToDo: is it better to groupBy feeder first?
        val kk: RDD[Iterable[(String, (Iterable[(String, Terminal)], Element))]] = jj.keyBy (x ⇒ x._2._1.map (_._1).toArray.sortWith (_ < _).mkString ("_")).groupByKey.values // [(feederid, ([(nodeid, Terminal)], Element)]

        // make edges
        // ToDo: fix this collect
        val transformers = tdata.groupBy (_.terminal1.TopologicalNode).values.map (_.toArray).map (TransformerSet (_)).collect
        def make_edge (transformers: Array[TransformerSet]) (args: Iterable[(Iterable[(String, Terminal)], Element)]): GLMEdge =
        {
            // the terminals may be different for each element, but their TopologicalNode values are the same, so use the head
            val id_cn_1 = args.head._1.head._2.TopologicalNode
            val id_cn_2 = args.head._1.tail.head._2.TopologicalNode
            AbgangKreis.toGLMEdge (transformers, options.base_temperature) (args.map (_._2), id_cn_1, id_cn_2)
        }
        // make one edge for each unique feeder it's in
        val edges: RDD[(String, GLMEdge)] = kk.flatMap (x ⇒ x.map (_._1).toArray.distinct.map (y ⇒ (y, make_edge (transformers) (x.filter (_._1 == y).map (_._2))))).cache

        // keep only nodes we need
        val needed_nodes = edges.flatMap (x ⇒ List ((x._2.cn1, x._2.cn1), (x._2.cn2, x._2.cn2))).join (nodes.keyBy (_._2._id)).map (_._2._2)

        // OK, so there are nodes and edges identified by feeder, one (duplicate) node and edge for each feeder
        log.info ("creating models")
        val feeders = needed_nodes.groupByKey.join (edges.groupByKey).join (feeder.feederStations.keyBy (_.id))
            .map (x ⇒ (x._1, (x._2._1._1, x._2._1._2, x._2._2))) // (feederid, ([FeederNode], [GLMEdge], (stationid, abgang#, header, feeder))
            .map (
                x ⇒
                {
                    val nodes = x._2._1.groupBy (_.id).map (y ⇒ y._2.head) // distinct
                    // to handle the ganged transformers that have only one node connected into the network
                    // check against the list of nodes and if there are more than one edge with the same id keep only those with both ends in the topology
                    val nodelist = nodes.map (x ⇒ (x._id, x)).toMap
                    def pickbest (arg: (String, Iterable[GLMEdge])): GLMEdge =
                    {
                        val withcount = arg._2.map (
                            edge ⇒
                            {
                                val n = (nodelist.get (edge.cn1), nodelist.get (edge.cn2)) match
                                {
                                    case (Some(n1), Some (n2)) ⇒ List (n1, n2)
                                    case (Some(n1), None) ⇒ List (n1)
                                    case (None, Some (n2)) ⇒ List (n2)
                                    case _ ⇒ List () // ?
                                }
                                (edge, n)
                            }
                        )
                        val two = withcount.filter (_._2.size >= 2)
                        if (two.nonEmpty)
                            two.head._1
                        else
                        {
                            val one =  withcount.filter (_._2.nonEmpty)
                            if (one.nonEmpty)
                                one.head._1
                            else
                                withcount.head._1
                        }
                    }
                    val edges = x._2._2.groupBy (_.id).map (pickbest)
                    FeederArea (x._1, x._2._3, nodes, edges)
                }).cache
        log.info ("%s feeders".format (feeders.count))

        def generate (gridlabd: GridLABD, area: FeederArea): Int =
        {
            if (options.verbose) // re-set the log level on each worker
                org.apache.log4j.LogManager.getLogger ("ch.ninecode.on.OneOfN").setLevel (org.apache.log4j.Level.INFO)

            val generator = OneOfNGLMGenerator (one_phase = true, temperature = options.temperature, date_format = date_format, area, voltages)
            gridlabd.export (generator)

            // to make the glm files testable, we add a player file for the switches generated by a bash file of the form:
            //     for file in \
            //     file1 \
            //     file2 \
            //     file3
            //     do
            //         echo 1970-01-01 00:00:00 UTC,CLOSED>$file.csv
            //     done
            val switches = (area.edges.filter (_.isInstanceOf[PlayerSwitchEdge]).map (_.id) ++ generator.swing_nodes.map (_.id)).mkString (" \\\n")
            val UNIX_EPOC: String = date_format.format (0L)
            val text =
                """for file in \
                  |%s
                  |do
                  |    echo %s,%s>$file.csv
                  |done""".stripMargin.format (switches, UNIX_EPOC, "CLOSED").getBytes (StandardCharsets.UTF_8)
            gridlabd.writeInputFile (generator.name + "/input_data", "gen", text, "ugo-rwx")
            log.info ("%10s %8s %s".format (area.feeder, area.metadata.station, area.metadata.description))
            1
        }
        val gridlabd = new GridLABD (session, topological_nodes = true, one_phase = !options.three, storage_level = options.storage, workdir = options.workdir)
        log.info ("exporting models")
        val count = feeders.map (generate (gridlabd, _)).sum.longValue

        // to test all the generated glm files, change to the output directory and run
        // for filename in STA*; do echo $filename; pushd $filename/input_data > /dev/null; ./gen; cd ..; gridlabd $filename; popd > /dev/null; done;

        count
    }
}

object OneOfN
{
    /**
     * The list of classes that can be persisted.
     */
    lazy val classes: Array[Class[_]] =
    {
        Array (
            classOf[ch.ninecode.on.AbgangKreis],
            classOf[ch.ninecode.on.EdgeData],
            classOf[ch.ninecode.on.Feeder],
            classOf[ch.ninecode.on.FeederArea],
            classOf[ch.ninecode.on.FeederNode],
            classOf[ch.ninecode.on.OneOfN],
            classOf[ch.ninecode.on.OneOfNOptions],
            classOf[ch.ninecode.on.MediumVoltageGLMGenerator],
            classOf[ch.ninecode.on.OneOfNGLMGenerator],
            classOf[ch.ninecode.on.PlayerSwitchEdge],
            classOf[ch.ninecode.on.USTKreis],
            classOf[ch.ninecode.on.USTNode],
            classOf[ch.ninecode.on.VertexData]
        )
    }
}